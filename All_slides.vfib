{"name":"Slides_with_slider","type":"virtual_device","properties":{"deviceIcon":1002,"categories":"[\"other\"]","currentIcon":"1003","log":"","logTemp":"","mainLoop":"\n-- in the main loop we'll take care of token expiry\n-- if token is expired we want to refresh the token and not setup a new household\nglobalTokenInfo = fibaro:getGlobal(\"Slidetoken\")\nslideScene = fibaro:getGlobal('Slidescene')\n\nif globalTokenInfo ~= nil then\n    decodedGlobalTokenInfo = json.decode(globalTokenInfo)\n    -- For safety purposes we'll try to renew 1 day in advance of expiry\n    if os.date(\"%Y-%m-%d %X\", os.time() + 24 * 60 * 60) < decodedGlobalTokenInfo.expires_at then\n        fibaro:debug(\"Token not expired, keeping it\")\n    \tfibaro:startScene(slideScene, {\"refreshHousehold\"})\n    \tfibaro:sleep(5 * 1000)\n  \t\tfibaro:debug(\"Refreshing household info as part of main loop\")\n    \tglobalSlideInfo = fibaro:getGlobal(\"Slides\")\n    \tdecodedInfo = json.decode(globalSlideInfo)\n    \tavailableDevices = decodedInfo[\"slidesInHousehold\"]\n\n   \t \tfor i = 1, availableDevices, 1 do\n        \t--fibaro:debug(i)\n        \tslideToCheck = \"slide\" .. i\n        \tfibaro:debug(decodedInfo[slideToCheck][\"device_name\"])\n        \tfibaro:call(deviceID, \"setProperty\", \"ui.Label\" .. i .. \".value\", decodedInfo[slideToCheck][\"device_name\"])\n    \t\tfibaro:debug(decodedInfo[slideToCheck][\"device_info\"][\"pos\"])\n    \t\tfibaro:call(deviceID, \"setProperty\", \"ui.Slider\" .. i .. \".value\", decodedInfo[slideToCheck][\"device_info\"][\"pos\"]*100)\n    \tend\n    else\n        fibaro:debug(\"Token expired, renewing it\")\n        fibaro:startScene(slideScene, {\"requestNewToken\", false})\n    end\nelse\n    fibaro:debug(\"No global variable found, please initialize slides or set a global variable\")\nend\n\n-- sleeping the function to keep a distance for 12 hours\nfibaro:sleep(60 * 60 * 12 * 1000)","ui.Label1.value":"Window Kitchen","ui.Label2.value":"Master Bedroom","ui.Label3.value":"","ui.Slider1.value":50,"ui.Slider2.value":12,"visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Slide 1","name":"Label1","favourite":false,"main":false}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"Open","name":"Button11","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[\"slide1\"][\"id\"]\ncommand = \"open\"\n\n\nif slideToCommand ~= nil then\nfibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\n\nelse fibaro:debug(\"No slides found to control\")  \nend","buttonIcon":1003,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"Close","name":"Button12","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[\"slide1\"][\"id\"]\ncommand = \"close\"\n\nif slideToCommand ~= nil then\n  fibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\nelse fibaro:debug(\"No slides found to control\")   \nend","buttonIcon":1004,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Curtain rails","name":"Slider1","msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\nsliderPosition = fibaro:getValue(deviceID, \"ui.Slider1.value\")\nconvertedToSlide = sliderPosition / 100\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[\"slide1\"][\"id\"]\ncommand = convertedToSlide\n\n\nif slideToCommand ~= nil then\nfibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\n\nelse fibaro:debug(\"No slides found to control\")  \nend","buttonIcon":1005,"value":7,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"Slide 2","name":"Label2","favourite":false,"main":false}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"Open","name":"Button21","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\n\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[\"slide2\"][\"id\"]\ncommand = \"open\"\n\nif slideToCommand ~= nil then\n  fibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\nelse fibaro:debug(\"No slides found to control\")   \nend","buttonIcon":1003,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"Close","name":"Button22","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[\"slide2\"][\"id\"]\ncommand = \"close\"\n\nif slideToCommand ~= nil then\n  fibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\nelse fibaro:debug(\"No slides found to control\")   \nend","buttonIcon":1004,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":8,"lua":true,"waitForResponse":false,"caption":"Curtain rails","name":"Slider2","msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\nsliderPosition = fibaro:getValue(deviceID, \"ui.Slider2.value\")\nconvertedToSlide = sliderPosition / 100\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[\"slide2\"][\"id\"]\ncommand = convertedToSlide\n\n\nif slideToCommand ~= nil then\nfibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\n\nelse fibaro:debug(\"No slides found to control\")  \nend","buttonIcon":1005,"value":12,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"","name":"Label3","favourite":false,"main":false}]},{"type":"button","elements":[{"id":10,"lua":true,"waitForResponse":false,"caption":"Initialize slides","name":"Button31","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal(\"Slides\")\nglobalTokenInfo = fibaro:getGlobal(\"Slidetoken\")\nslideScene = fibaro:getGlobal(\"Slidescene\")\n\nif globalTokenInfo ~= \"0\" and globalSlideInfo ~= \"0\" then\n  \tfibaro:debug(\"Stored information for slides found\")\n    fibaro:startScene(slideScene, {\"refreshHousehold\"})\n\n    fibaro:sleep(5 * 1000)\n  \tglobalSlideInfo = fibaro:getGlobal(\"Slides\")\n    decodedInfo = json.decode(globalSlideInfo)\n  \tavailableDevices = decodedInfo[\"slidesInHousehold\"]\n\tfibaro:debug(availableDevices)\n    for i = 1, availableDevices, 1 do\n        --fibaro:debug(i)\n        slideToCheck = \"slide\" .. i\n        fibaro:debug(decodedInfo[slideToCheck][\"device_name\"])\n        fibaro:call(deviceID, \"setProperty\", \"ui.Label\" .. i .. \".value\", decodedInfo[slideToCheck][\"device_name\"])\n    \tfibaro:debug(decodedInfo[slideToCheck][\"device_info\"][\"pos\"])\n    \tfibaro:call(deviceID, \"setProperty\", \"ui.Slider\" .. i .. \".value\", decodedInfo[slideToCheck][\"device_info\"][\"pos\"]*100)\n    end\nelseif globalTokenInfo == \"0\" then\n    fibaro:debug(\"Nothing found in global variables, requesting token\")\n    fibaro:startScene(slideScene, {\"requestNewToken\", true})\n    fibaro:sleep(5 * 1000)\n  \tglobalSlideInfo = fibaro:getGlobal(\"Slides\")\n    decodedInfo = json.decode(globalSlideInfo)\n    availableDevices = decodedInfo[\"slidesInHousehold\"]\n\n    for i = 1, availableDevices, 1 do\n        --fibaro:debug(i)\n        slideToCheck = \"slide\" .. i\n        fibaro:debug(decodedInfo[slideToCheck][\"device_name\"])\n        fibaro:call(deviceID, \"setProperty\", \"ui.Label\" .. i .. \".value\", decodedInfo[slideToCheck][\"device_name\"])\n    \tfibaro:debug(decodedInfo[slideToCheck][\"device_info\"][\"pos\"])\n    \tfibaro:call(deviceID, \"setProperty\", \"ui.Slider\" .. i .. \".value\", decodedInfo[slideToCheck][\"device_info\"][\"pos\"]*100)\n    end\nend","buttonIcon":1007,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}