{"name":"Single slide","type":"virtual_device","properties":{"deviceIcon":1002,"categories":"[\"other\"]","currentIcon":"1007","log":"","logTemp":"","mainLoop":"-- in the main loop we'll take care of token expiry\n-- if token is expired we want to refresh the token and not setup a new household\nglobalTokenInfo = fibaro:getGlobal(\"Slidetoken\")\nslideScene = fibaro:getGlobal('Slidescene')\n\n-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- list slidenumber here\nslideToCheck = 'slide3'\n\nif globalTokenInfo ~= nil then\n    decodedGlobalTokenInfo = json.decode(globalTokenInfo)\n    -- For safety purposes we'll try to renew 1 day in advance of expiry\n    if os.date(\"%Y-%m-%d %X\", os.time() + 24 * 60 * 60) < decodedGlobalTokenInfo.expires_at then\n        fibaro:debug(\"Token not expired, keeping it\")\n    \tfibaro:startScene(slideScene, {\"refreshHousehold\"})\n\t\t\n    \t-- Sleep for 5 seconds to retrieve all info\n    \tfibaro:sleep(5 * 1000)\n  \t\t\n    \t-- use the returned data to fill the virtual device\n    \tglobalSlideInfo = fibaro:getGlobal(\"Slides\")\n   \t \tdecodedInfo = json.decode(globalSlideInfo)\n    \tfibaro:debug(\"Name of device: \" .. decodedInfo[slideToCheck][\"device_name\"])\n    \tfibaro:call(deviceID, \"setProperty\", \"ui.Label1.value\", decodedInfo[slideToCheck][\"device_name\"])\n    \tfibaro:debug(\"Position of curtains: \" .. decodedInfo[slideToCheck][\"device_info\"][\"pos\"])\n    \tfibaro:call(deviceID, \"setProperty\", \"ui.Slider1.value\", decodedInfo[slideToCheck][\"device_info\"][\"pos\"]*100)\n\n    else\n        fibaro:debug(\"Token expired, renewing it\")\n        fibaro:startScene(slideScene, {\"requestNewToken\", false})\n    end\nelse\n    fibaro:debug(\"No global variable found, please initialize slides or set a global variable\")\nend\n\n-- sleeping the function to keep a distance for 12 hours\nfibaro:sleep(60 * 60 * 12 * 1000)","ui.Label1.value":"Window Kitchen","ui.Slider1.value":3,"visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Slide 1 ","name":"Label1","favourite":false,"main":false}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"Open","name":"Button21","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- list slidenumber here\nslideToCheck = 'slide3'\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[slideToCheck][\"id\"]\ncommand = \"open\"\n\n\nif slideToCommand ~= nil then\nfibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\n\nelse fibaro:debug(\"No slides found to control\")  \nend","buttonIcon":1003,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"Close","name":"Button22","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- list slidenumber here\nslideToCheck = 'slide3'\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[slideToCheck][\"id\"]\ncommand = \"close\"\n\nif slideToCommand ~= nil then\n  fibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\nelse fibaro:debug(\"No slides found to control\")   \nend","buttonIcon":1004,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Curtain rail","name":"Slider1","msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- list slidenumber here\nslideToCheck = 'slide3'\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal('Slides')\ndecodedInfo = json.decode(globalSlideInfo)\nslideScene = fibaro:getGlobal('Slidescene')\nsliderPosition = fibaro:getValue(deviceID, \"ui.Slider1.value\")\nconvertedToSlide = sliderPosition / 100\n\n-- use the label value to get the technical id\nslideToCommand = decodedInfo[slideToCheck][\"id\"]\ncommand = convertedToSlide\n\n\nif slideToCommand ~= nil then\nfibaro:startScene(slideScene, {\"controlSlide\", slideToCommand, command})\n\nelse fibaro:debug(\"No slides found to control\")  \nend","buttonIcon":1005,"value":3,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Initialize","name":"Button11","empty":false,"msg":"-- create deviceID for retrieving self\nlocal deviceID = fibaro:getSelfId()\n\n-- list slidenumber here\nslideToCheck = 'slide3'\n\n-- retrieve global variables if they are there\nglobalSlideInfo = fibaro:getGlobal(\"Slides\")\nglobalTokenInfo = fibaro:getGlobal(\"Slidetoken\")\nslideScene = fibaro:getGlobal(\"Slidescene\")\n\n-- check if tokens and slide info exists\nif globalTokenInfo ~= \"0\" and globalSlideInfo ~= \"0\" then\n  \tfibaro:debug(\"Stored information for slides found\")\n    fibaro:startScene(slideScene, {\"refreshHousehold\"})\n\t\n  \t-- Sleep for 5 seconds to retrieve all info\n    fibaro:sleep(5 * 1000)\n  \t\n  \t-- use the returned data to fill the virtual device\n  \tglobalSlideInfo = fibaro:getGlobal(\"Slides\")\n    decodedInfo = json.decode(globalSlideInfo)\n    fibaro:debug(\"Name of device: \" .. decodedInfo[slideToCheck][\"device_name\"])\n    fibaro:call(deviceID, \"setProperty\", \"ui.Label1.value\", decodedInfo[slideToCheck][\"device_name\"])\n    fibaro:debug(\"Position of curtains: \" .. decodedInfo[slideToCheck][\"device_info\"][\"pos\"])\n    fibaro:call(deviceID, \"setProperty\", \"ui.Slider1.value\", decodedInfo[slideToCheck][\"device_info\"][\"pos\"]*100)\n\n  --If there is no token yet, retrieve it and get household info   \nelseif globalTokenInfo == \"0\" then\n    fibaro:debug(\"Nothing found in global variables, requesting token\")\n    fibaro:startScene(slideScene, {\"requestNewToken\", true})\n    \n  \t-- Sleep for 5 seconds to retrieve all info\n\tfibaro:sleep(5 * 1000)\n  \t\n  \t-- use the returned data to fill the virtual device\n  \tglobalSlideInfo = fibaro:getGlobal(\"Slides\")\n    decodedInfo = json.decode(globalSlideInfo)\n    fibaro:debug(\"Name of device: \" .. decodedInfo[slideToCheck][\"device_name\"])\n    fibaro:call(deviceID, \"setProperty\", \"ui.Label1.value\", decodedInfo[slideToCheck][\"device_name\"])\n    fibaro:debug(\"Position of curtains: \" .. decodedInfo[slideToCheck][\"device_info\"][\"pos\"])\n    fibaro:call(deviceID, \"setProperty\", \"ui.Slider1.value\", decodedInfo[slideToCheck][\"device_info\"][\"pos\"]*100)\nend","buttonIcon":1007,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}